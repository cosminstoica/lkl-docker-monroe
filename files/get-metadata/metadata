#!/usr/bin/python

# from github.com/MONROE-PROJECT/Utilities/blob/master/monroe-experiments/usr/bin/metadata

import zmq
import sys
import time
import sys
import json
import netifaces
import pprint
pp = pprint.PrettyPrinter(indent=4)

# Only enable DEBUG mode on local testing node
DEBUG = False

CONFIGFILE = '/monroe/config'

IFaces = {}

LKL_IF = {}
LKL_CONFIG = {
    "gateway":"172.18.1.1",
    "debug":"0",
    "singlecpu":"1",
    "sysctl":"net.ipv4.tcp_wmem=4096 87380 214748364",
    "interfaces":[]
  }

# Default values (overwritable from the CONFIGFILE)
EXPCONFIG = {
        "zmqport": "tcp://172.17.0.1:5556",
        "nodeid": "fake.nodeid",                        # Need to overriden
        "metadata_topic": "MONROE.META",
        "verbosity": 1,                                 # 0 = "Mute", 1=error, 2=Information, 3=verbose
        "resultdir": "/monroe/results/",
        "socketwait": 60,                                # Number of seconds to wait for data on the socket
        "disabled_interfaces": ["lo",
                        "metadata",
                        "eth0"
                        ],
        "interfaces_without_metadata": ["eth0",
                                        "wlan0"],       # Manual metadata on these IF
        }
# Helper functions
def check_if(ifname):
    """Check if interface is up and have got an IP address."""
    return (ifname in netifaces.interfaces() and
            netifaces.AF_INET in netifaces.ifaddresses(ifname))

def get_ip(ifname):
    """Get IP address of interface."""
    # TODO: what about AFINET6 / IPv6?
    return netifaces.ifaddresses(ifname)[netifaces.AF_INET][0]['addr']

def get_netmask(ifname):
    return netifaces.ifaddresses(ifname)[netifaces.AF_INET][0]['netmask']

"""
:param netmask: netmask ip addr (eg: 255.255.255.0)
:return: prefix length (cidr number) (eg: 24)
"""
def netmask_to_cidr(netmask):
    masklen = sum([bin(int(x)).count("1") for x in netmask.split(".")])
    # masklen = 0
    # s = mask.split(".")
    # for piece in s:
    #     if piece == 0:
    #         return masklen
    #     masklen += bin(int(piece)).count("1")
    return masklen

def time_now():
    return time.time()

def create_LKL_config():
    # Load config and check so we have all variables we need
    try:
        disabled_interfaces = EXPCONFIG['disabled_interfaces']
        if_without_metadata = EXPCONFIG['interfaces_without_metadata']
    except Exception as e:
        print("Missing expconfig variable {}".format(e))
        raise e

    for ifname in netifaces.interfaces():

        # Skip disabled interfaces
        if ifname in disabled_interfaces:
            if EXPCONFIG['verbosity'] > 1:
                print("Interface is disabled, skipping {}".format(ifname))
            continue

        if 'enabled_interfaces' in EXPCONFIG and not ifname in EXPCONFIG['enabled_interfaces']:
            if EXPCONFIG['verbosity'] > 1:
                print("Interface is not enabled, skipping {}".format(ifname))
            continue

        # Interface is not up we just skip that one
        if not check_if(ifname):
            if EXPCONFIG['verbosity'] > 1:
                print("Interface is not up {}".format(ifname))
            continue

        ip      = get_ip(ifname)
        netmask = get_netmask(ifname)

        print("%s: %s %s" %(ifname, ip, netmask))
        IFaces[ifname] = ( ip, netmask)

    for ifname in IFaces:
        LKL_IF = {  "type"   : "raw",
                    "param"  : ifname,
                    "ip"     : get_ip(ifname),
                    "masklen": netmask_to_cidr(get_netmask(ifname)),
                }
        LKL_CONFIG["interfaces"].append(LKL_IF)

    pp.pprint(LKL_CONFIG)

    with open('lkl-config.json', 'w') as fp:
        json.dump(LKL_CONFIG, fp, indent=4)


def create_socket(topic, port):
    print("Trying to create a new socket on {}".format(port))
    context = zmq.Context()
    socket = context.socket(zmq.SUB)
    socket.connect (port)
    socket.setsockopt(zmq.SUBSCRIBE, '')
    print("New socket created listening on topic : {}".format(topic))
    return socket



if not DEBUG:
    try:
        with open(CONFIGFILE) as configfd:
            EXPCONFIG.update(json.load(configfd))
    except Exception as e:
        print("Cannot retrieve config: {}".format(e))
        # sys.exit(1)
else:
    EXPCONFIG['zmqport'] = "tcp://localhost:5556"
    EXPCONFIG['metadata_topic'] = ""
    EXPCONFIG['verbosity'] = 3
    EXPCONFIG['socketwait'] = 10


create_LKL_config()


def metadata(meta_ifinfo, ifname, expconfig):
    timeout=60
    time_start = time.time()

    socket = create_socket(EXPCONFIG['metadata_topic'],
                           EXPCONFIG['zmqport'])

    # Initialize poll set
    poller = zmq.Poller()
    poller.register(socket, zmq.POLLIN)

    while time_now() - time_start < timeout:
        try:
            (topic, msgdata) = socket.recv().split(' ', 1)
        except zmq.ContextTerminated:
            # The context is terminated, lets try to open another socket
            # If that fails, abort
            if EXPCONFIG['verbosity'] > 0:
                print ("Error: ContextTerminated")
            socket = create_socket(EXPCONFIG['metadata_topic'],
                                   EXPCONFIG['zmqport'],
                                   EXPCONFIG['verbosity'])
            poller = zmq.Poller()
            poller.register(socket, zmq.POLLIN)
            continue
        except zmq.ZMQError as e:
            # Other zmq Error just log and quit
            if EXPCONFIG['verbosity'] > 0:
                print("Error: ZMQ failed with : {}".format(e))
            raise


        print topic
        print msgdata
        print("\n")
        sys.stdout.flush()

        if topic.startswith("MONROE.META.DEVICE.MODEM."):
            msg = json.loads(msgdata)
            # Some zmq messages do not have nodeid information so I set it here
            msg['NodeId'] = EXPCONFIG['nodeid']
